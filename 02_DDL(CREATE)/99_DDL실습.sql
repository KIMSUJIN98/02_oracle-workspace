-- 실습문제 --
-- 도서관리 프로그램을 만들기 위한 테이블을 만들기
-- 이때, 제약조건에 이름을 부여할 것
-- 각 컬럼에 주석달기

-- 1. 출판사들에 대한 데이터를 담기 위한 출판사 테이블(TB_PUBLISHER)
-- 컬럼: PUB_NO(출판사번호) --기본키(PUBLISHER_PK)
-- PUB_NAME(출판사명) --NOT NULL(PUBLICHSER_NN)
-- PHONE(출판사전화번호) --제약조건 없음
-- 3개 정도의 샘플 데이터 추가하기

CREATE TABLE TB_PUBLISHER(
    PUB_NO NUMBER CONSTRAINT PUBLISHER_PK PRIMARY KEY,
    PUB_NAME VARCHAR2(30) CONSTRAINT PUBLICHSER_NN NOT NULL,
    PHONE VARCHAR2(13)
);

SELECT * FROM TB_PUBLISHER;

COMMENT ON COLUMN TB_PUBLISHER.PUB_NO IS '출판사번호';
COMMENT ON COLUMN TB_PUBLISHER.PUB_NAME IS '출판사명';
COMMENT ON COLUMN TB_PUBLISHER.PHONE IS '출판사전화번호';

INSERT INTO TB_PUBLISHER
VALUES(1, '문학동네', '010-1234-5678');

INSERT INTO TB_PUBLISHER
VALUES(2, '열린책들', '010-1111-2222');

INSERT INTO TB_PUBLISHER
VALUES(3, '이지북', '010-3333-4444');


-- 2. 도서들에 대한 데이터를 담기 위한 도서 테이블(TB_BOOK)
-- 컬럼: BK_NO(도서번호) --기본키(BOOK_PK)
-- BK_TITLE(도서명) --NOT NULL(BOOK_NN_TITLE)
-- BK_AUTHOR(저자명) --NOT NULL(BOOK_NN_AUTHOR)
-- BK_PRICE(가격)
-- BK_STOCK(재고) --기본값 1로 지정
-- BK_PUB_NO(출판사번호) --외래키(BOOK_FK)(TB_PUBLISHER 테이블을 참조하도록)
-- 이때 참조하고 있는 부모데이터 삭제 시 자식데이터도 삭제되도록 설정
-- 5개 정도의 샘플 데이터 추가하기

CREATE TABLE TB_BOOK(
    BK_NO NUMBER CONSTRAINT BOOK_PK PRIMARY KEY,
    BK_TITLE VARCHAR2(50) CONSTRAINT BOOK_NN_TITLE NOT NULL,
    BK_AUTHOR VARCHAR2(30) CONSTRAINT BOOK_NN_AUTHOR NOT NULL,
    BK_PRICE NUMBER,
    BK_STOCK NUMBER DEFAULT 1,
    BK_PUB_NO NUMBER CONSTRAINT BOOK_FK REFERENCES TB_PUBLISHER ON DELETE CASCADE
);

SELECT * FROM TB_BOOK;

COMMENT ON COLUMN TB_BOOK.BK_NO IS '도서번호';
COMMENT ON COLUMN TB_BOOK.BK_TITLE IS '도서명';
COMMENT ON COLUMN TB_BOOK.BK_AUTHOR IS '저자명';
COMMENT ON COLUMN TB_BOOK.BK_PRICE IS '가격';
COMMENT ON COLUMN TB_BOOK.BK_STOCK IS '재고';
COMMENT ON COLUMN TB_BOOK.BK_PUB_NO IS '출판사번호';

INSERT INTO TB_BOOK
VALUES(10, '여행의 이유', '김영하', 12150, 24, 1);

INSERT INTO TB_BOOK
VALUES(11, '디 에센셜:장미의 이름', '움베르토 에코', 28350, 185, 2);

INSERT INTO TB_BOOK
VALUES(12, 'DMZ 천사의 별1', '박미연', 12510, 236, 3);

INSERT INTO TB_BOOK
VALUES(13, '중동전쟁', '임용한', 22500, 310, 1);

INSERT INTO TB_BOOK
VALUES(14, '대인기피증이지만 탐정입니다', '니타도리 게이', 15120, 264, 2);


-- 3. 회원에 대한 데이터를 담기 위한 회원 테이블(TB_MEMBER)
-- 컬럼명: MEMBER_NO(회원번호) --기본키(MEMBER_PK)
-- MEMBER_ID(아이디) --중복금지(MEMBER_UQ)
-- MEMBER_PWD(비밀번호) NOT NULL(MEMBER_NN_PWD)
-- MEMBER_NAME(회원명) NOT NULL(MEMBER_NN_NAME)
-- GENDER(성별) 'M' 또는 'F'로 입력되도록 제한(MEMBER_CK_GEN)
-- ADDRESS(주소)
-- PHONE(연락처)
-- STATUS(탈퇴여부) --기본값으로 'N' 그리고 'Y' 혹은 'N'으로 입력되도록 제약조건(MEMBER_CK_STA)
-- ENROLL_DATE(가입일) --기본값으로 SYSDATE, NOT NULL 조건(MEMBER_NN_EN)
-- 5개 정도의 샘플 데이터 추가하기

CREATE TABLE TB_MEMBER(
    MEMBER_NO NUMBER CONSTRAINT MEMBER_PK PRIMARY KEY,
    MEMBER_ID VARCHAR2(20) CONSTRAINT MEMBER_UQ UNIQUE,
    MEMBER_PWD VARCHAR2(20) CONSTRAINT MEMBER_NN_PWD NOT NULL,
    MEMBER_NAME VARCHAR2(20) CONSTRAINT MEMBER_NN_NAME NOT NULL,
    GENDER CHAR(1) CONSTRAINT MEMBER_CK_GEN CHECK(GENDER IN ('M', 'F')),
    ADDRESS VARCHAR2(80),
    PHONE VARCHAR2(13),
    STATUS CHAR(1) DEFAULT 'N' CONSTRAINT MEMBER_CK_ST CHECK(STATUS IN ('Y', 'N')),
    ENROLL_DATE DATE DEFAULT SYSDATE CONSTRAINT MEMBER_NN_EN NOT NULL
);

SELECT * FROM TB_MEMBER;

COMMENT ON COLUMN TB_MEMBER.MEMBER_NO IS '회원번호';
COMMENT ON COLUMN TB_MEMBER.MEMBER_ID IS '아이디';
COMMENT ON COLUMN TB_MEMBER.MEMBER_PWD IS '비밀번호';
COMMENT ON COLUMN TB_MEMBER.MEMBER_NAME IS '회원명';
COMMENT ON COLUMN TB_MEMBER.GENDER IS '성별';
COMMENT ON COLUMN TB_MEMBER.ADDRESS IS '주소';
COMMENT ON COLUMN TB_MEMBER.PHONE IS '연락처';
COMMENT ON COLUMN TB_MEMBER.STATUS IS '탈퇴여부';
COMMENT ON COLUMN TB_MEMBER.ENROLL_DATE IS '가입일';

INSERT INTO TB_MEMBER
VALUES(80, 'user01', 'pass01', '손흥민', 'M', '경기도 광명시 목감로 52', '010-5049-9858', DEFAULT, DEFAULT);

INSERT INTO TB_MEMBER
VALUES(81, 'user02', 'pass02', '네이마르', 'M', '지구 어딘가 브라질', '010-3333-4444', 'Y', '2022/10/12');

INSERT INTO TB_MEMBER
VALUES(82, 'user03', 'pass03', '날강두', 'F', '포르투갈에서 귀화하여 한국 어딘가', '010-5555-9858', DEFAULT, '21/04/30');

INSERT INTO TB_MEMBER
VALUES(83, 'user04', 'pass04', '이강인', 'M', '서울특별시 강남구 대치동 32길 85로', '010-5784-9449', 'Y', '99/08/01');

INSERT INTO TB_MEMBER
VALUES(84, 'user05', 'pass05', '김병지', 'F', '경상북도 울릉군 울릉읍 독도리', '010-0101-0101', DEFAULT, DEFAULT);


-- 4. 도서를 대여한 회원에 대한 데이터를 담기 위한 대여목록 테이블(TB_RENT)
-- 컬럼:
-- RENT_NO(대여번호) --기본키(RENT_PK)
-- RENT_MEM_NO(대여회원번호) --외래키(RENT_FK_MEM) TB_MEMBER와 참조하도록
-- 이때 부모데이터 삭제 시 NULL값이 되도록 옵션 설정
-- RENT_BOOK_NO(대여도서번호) --외래키(RENT_FK_BOOK) TB_BOOK와 참조하도록
-- 이때 부모데이터 삭제 시 NULL값이 되도록 옵션설정
-- RENT_DATE(대여일) --기본값 SYSDATE
-- 샘플데이터 3개정도 추가하기

CREATE TABLE TB_RENT(
    RENT_NO NUMBER CONSTRAINT RENT_PK PRIMARY KEY,
    RENT_MEM_NO NUMBER CONSTRAINT RENT_FK_MEM REFERENCES TB_MEMBER ON DELETE SET NULL,
    RENT_BOOK_NO NUMBER CONSTRAINT RENT_FK_BOOK REFERENCES TB_BOOK ON DELETE SET NULL,
    RENT_DATE DATE DEFAULT SYSDATE
);

SELECT * FROM TB_RENT;

COMMENT ON COLUMN TB_RENT.RENT_NO IS '대여번호';
COMMENT ON COLUMN TB_RENT.RENT_MEM_NO IS '대여회원번호';
COMMENT ON COLUMN TB_RENT.RENT_BOOK_NO IS '대여도서번호';
COMMENT ON COLUMN TB_RENT.RENT_DATE IS '대여일';

INSERT INTO TB_RENT
VALUES(71, 80, 10, DEFAULT);

INSERT INTO TB_RENT
VALUES(72, 82, 12, DEFAULT);

INSERT INTO TB_RENT
VALUES(73, 81, 11, DEFAULT);

-- 12번 도서를 대여한 회원의 이름, 아이디, 대여일, 반납예정일(대여일+7)을 조회하시오.
SELECT MEMBER_NAME, MEMBER_ID, RENT_DATE, RENT_DATE + 7 AS "반납예정일"




